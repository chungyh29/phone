/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo,  useState,useEffect } from 'react'
import { useGLTF } from '@react-three/drei/core/useGLTF'
import * as THREE from 'three'
import { useFrame, useThree } from 'react-three-fiber'
import {a, useSpring } from 'react-spring/three';
import ArObj from './ArObj';
import { getMouseDegrees } from './utils';


export default function Model({mouse, ...props}) {
  
  const cam = useRef()
  const arobj = useRef()
  const group = useRef()
  const [isVisible, setIsVisible] =useState(false)
  const [hovered, setHovered] = useState(false)

  const {emissiveVal, opacityVal} = useSpring({
    from: {emissiveVal: 0x000000, opacityVal: 0 },
    to: {emissiveVal: isVisible ? 0xFF0000 : 0x000000, opacityVal: isVisible ? 0 : 0.4},
    // to: {emissiveVal:  0xFF0000 , opacityVal: 0.4},
    loop: {reverse: true}
  });


  const { nodes, materials } = useGLTF('/iphone.glb')
  const {scene,gl} = useThree()
  const [target] = useMemo(() => {
    const target = new THREE.WebGLRenderTarget(90,180, {
      format: THREE.RGBFormat,
      stencilBuffer:false
    })
    return [target]
  },[])

   

  useFrame(() => {
    gl.setRenderTarget(target)
    gl.render(scene, cam.current)
    gl.setRenderTarget(null)
    if(isVisible){
      moveARObj(mouse, arobj.current)
    }
  })

  useEffect(() => {
    cam.current.updateProjectionMatrix()
  },[])

  useEffect(() => {
    //Take 0.5 second before the AR object appears

    if (isVisible) {
      let timeOut;
      timeOut= setTimeout(() => {
        arobj.current.visible = isVisible;
      }, 500 )
      return (() => clearTimeout(timeOut))
    }else
    { //AR object disappears immediately
      arobj.current.visible = isVisible
  
    }
  }, [isVisible])

  useEffect(() => {
    document.body.style.cursor = hovered ? 'pointer' : 'auto'
  })

  const Clicked = (e) => {
    e.stopPropagation();
    setIsVisible(!isVisible);
    props.onClick();
    console.log(isVisible)
  }

  const moveARObj = (mouse, obj, degreeLimit = 40 ) => {
    let degrees = getMouseDegrees(mouse.current.x, degreeLimit)
    obj.rotation.yD = THREE.MathUtils.lerp(obj.rotation.yD || 0, degrees.x, 0.1)
    obj.rotation.y = THREE.Math.degToRad(obj.rotation.yD) - 0.7
  }

  return (
    <a.group 
      ref={group}  
      dispose={null} 
      position={props.pos} 
      rotation={props.rot} 
      onClick={Clicked} 
      onPointerOver = {() => setHovered(true)}
      onPointerOut = {() => setHovered(false)}
      >
      {/* Add camera to capture what is behind the phone */}
      <perspectiveCamera 
        fov={80} 
        aspect={0.5} 
        position={[0.45,0.9,-0.1]}
        near={0.5}
        far={25}
        ref={cam}  />

      {/* Add the AR object on top of the phone */}
      <object3D 
        ref={arobj} 
        position={[0.2,1,0.22]}  
        scale={[0.3,0.3,0.3]} 
        rotation={[Math.PI/2,-0.7,0]}>
        <ArObj />
      </object3D>
      

      <group position={[0.1, 1, -0.08]} rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>
        <group position={[24.8, -5.5, -98.56]}>
          <mesh material={materials['schwarz glass']} geometry={nodes.Cube001.geometry} />
          {/* Screen of the phone */}
          <mesh position={[2.5,14.8,98.50]} rotation={[-Math.PI/2,0,0]}>
            <planeBufferGeometry args={[90,180]} attach='geometry'/>
            <meshStandardMaterial 
              map={target.texture} attach='material' 
              opacity={0.9} 
              metalness={0.6} 
              roughness={0}
              />

          </mesh>

          {/* Mesh for flashing colours */}
          <mesh 
            position={[2.5,8,98]} 
            rotation={[-Math.PI/2,0,0]}
          >

            <planeBufferGeometry 
              args={[130, 250]} 
              attach='geometry' />
            <a.meshStandardMaterial
              opacity={opacityVal}
              transparent
              emissive={emissiveVal}
            />
          </mesh>

        </group>
        <group position={[-113.54, 2.64, 124.1]}>
          <group position={[0, 5.22, 0]}>
            <mesh material={materials.Metallic} geometry={nodes.Mesh040.geometry} />
            <mesh material={materials['schwarz glass']} geometry={nodes.Mesh040_1.geometry} />
            <mesh material={materials['Mat.009']} geometry={nodes.Mesh040_2.geometry} />
          </group>

        </group>
        <group position={[18.54, 2.64, 114.47]}>
          <mesh
            material={materials.Metallic}
            geometry={nodes.Cylinder_12_2.geometry}
            position={[-0.56, -1.27, -2.81]}
          />
          <mesh material={materials.Metallic} geometry={nodes.Extrude_5_3.geometry} position={[-132.08, 0, 9.63]}>
            <mesh material={materials.Metallic} geometry={nodes.Cap_2_7.geometry} position={[131.55, -1.24, -11.18]} />
          </mesh>
        </group>
        <group position={[39.09, 2.64, 114.47]}>
          <mesh material={materials.Metallic} geometry={nodes.Cylinder_12.geometry} position={[-0.56, -1.27, -2.81]} />
          <mesh material={materials.Metallic} geometry={nodes.Extrude_5_2.geometry} position={[-132.08, 0, 9.63]}>
            <mesh material={materials.Metallic} geometry={nodes.Cap_2_6.geometry} position={[131.55, -1.24, -11.18]} />
          </mesh>
        </group>
        <group position={[65.66, -9.77, -83.68]} rotation={[0, 0, -0.06]}>
          <mesh material={materials['Mat.3']} geometry={nodes.Extrude.geometry} position={[-0.68, 3.41, 8.74]}>
            <mesh
              material={materials['Mat.4']}
              geometry={nodes.Cap_1_3.geometry}
              position={[0.28, 0.61, 1.54]}
              rotation={[0, 0, -3.09]}
            />
            <mesh
              material={materials['Mat.5']}
              geometry={nodes.Cap_2_3.geometry}
              position={[0.28, 0.61, 1.54]}
              rotation={[0, 0, -3.09]}
            />
          </mesh>
          <mesh material={materials['Mat.007']} geometry={nodes.Extrude_1.geometry} position={[-27.18, 15.8, -20.85]}>
            <mesh
              material={materials['Mat.7']}
              geometry={nodes.Cap_1_4.geometry}
              position={[0.18, 0.38, 1.95]}
              rotation={[0, 0, -3.09]}
            />
            <mesh
              material={materials['Mat.8']}
              geometry={nodes.Cap_2_4.geometry}
              position={[0.18, 0.38, 1.95]}
              rotation={[0, 0, -3.09]}
            />
          </mesh>
          <mesh material={materials.Mat} geometry={nodes.Extrude_5.geometry} position={[-0.68, 3.41, -14.33]}>
            <mesh
              material={materials['Mat.1']}
              geometry={nodes.Cap_1_2.geometry}
              position={[0.28, 0.61, 3.11]}
              rotation={[0, 0, -3.09]}
            />
            <mesh
              material={materials['Mat.2']}
              geometry={nodes.Cap_2_2.geometry}
              position={[0.28, 0.61, 3.11]}
              rotation={[0, 0, -3.09]}
            />
          </mesh>
          <mesh material={materials['Mat.6']} geometry={nodes.Extrude_7.geometry} position={[18.48, -67.19, 215.71]}>
            <mesh
              material={materials['Mat.6']}
              geometry={nodes.Cap_1.geometry}
              position={[-19.02, 70.3, -216.12]}
              rotation={[0, 0, -3.07]}
            />
            <mesh
              material={materials['Mat.6']}
              geometry={nodes.Cap_2.geometry}
              position={[-19.02, 70.3, -216.12]}
              rotation={[0, 0, -3.07]}
            />
          </mesh>
        </group>
        <mesh material={materials.Metallic} geometry={nodes.Extrude_1_2.geometry} position={[-19.17, 2.64, -34.69]}>
          <mesh material={materials.Metallic} geometry={nodes.Cap_2_10.geometry} position={[-8.06, -1.55, -1.87]} />
          <mesh material={materials.Metallic} geometry={nodes.Rounding_4.geometry} position={[-8.06, -1.55, -1.87]}>
            <mesh material={materials.Metallic} geometry={nodes.Cap_1_10.geometry} />
          </mesh>
        </mesh>
        <mesh
          material={materials['schwarz glass']}
          geometry={nodes.Extrude_2.geometry}
          position={[65.58, -5.83, -82.95]}>
          <mesh
            material={materials['schwarz glass']}
            geometry={nodes.Cap_1_5.geometry}
            position={[-0.37, 1.22, -1.19]}
          />
          <mesh
            material={materials['schwarz glass']}
            geometry={nodes.Rounding.geometry}
            position={[-0.37, 1.22, -1.19]}>
            <mesh material={materials['schwarz glass']} geometry={nodes.Cap_2_5.geometry} />
          </mesh>
        </mesh>
        <mesh material={materials.Metallic} geometry={nodes.Extrude_2_2.geometry} position={[-19.17, 2.64, -55.64]}>
          <mesh material={materials.Metallic} geometry={nodes.Cap_2_11.geometry} position={[-8.06, -1.55, -1.87]} />
          <mesh material={materials.Metallic} geometry={nodes.Rounding_5.geometry} position={[-8.06, -1.55, -1.87]}>
            <mesh material={materials.Metallic} geometry={nodes.Cap_1_11.geometry} />
          </mesh>
        </mesh>
        <mesh material={materials.Metallic} geometry={nodes.Extrude_3.geometry} position={[-24.69, 2.64, -75.38]}>
          <mesh material={materials.Metallic} geometry={nodes.Cap_2_9.geometry} position={[-2.8, -2.21, -1.87]} />
          <mesh material={materials.Metallic} geometry={nodes.Rounding_3.geometry} position={[-2.8, -2.21, -1.87]}>
            <mesh material={materials.Metallic} geometry={nodes.Cap_1_9.geometry} />
          </mesh>
        </mesh>
        <mesh material={materials.Metallic} geometry={nodes.Extrude_4.geometry} position={[76.44, 2.64, -46.24]}>
          <mesh material={materials.Metallic} geometry={nodes.Cap_1_8.geometry} position={[-10.58, -1.55, -1.87]} />
          <mesh material={materials.Metallic} geometry={nodes.Rounding_2.geometry} position={[-10.58, -1.55, -1.87]}>
            <mesh material={materials.Metallic} geometry={nodes.Cap_2_8.geometry} />
          </mesh>
        </mesh>
        <mesh material={materials.Metallic} geometry={nodes.Sweep.geometry} position={[-113.54, 2.64, 124.1]} />
      </group>
    </a.group>
  )
}

useGLTF.preload('/iphone.glb')
